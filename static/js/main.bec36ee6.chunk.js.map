{"version":3,"sources":["App.tsx","index.tsx"],"names":["goodsFromServer","App","useState","sortField","setSortField","reverseField","setRevField","visibleGoods","sort","good1","good2","length","localeCompare","reverse","className","type","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"+NAIaA,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAKWC,EAAgB,WAC3B,MAAkCC,mBAAwB,IAA1D,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAoCF,oBAAkB,GAAtD,mBAAOG,EAAP,KAAqBC,EAArB,KACMC,EAAsB,UAAOP,GAqBnC,OAnBIG,GACFI,EAAaC,MAAK,SAACC,EAAOC,GACxB,OAAQP,GACN,IAAK,SACH,OAAOM,EAAME,OAASD,EAAMC,OAE9B,IAAK,WACH,OAAOF,EAAMG,cAAcF,GAE7B,QACE,OAAO,MAKXL,GACFE,EAAaM,UAIb,sBAAKC,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLC,QAAS,kBAAOZ,EAAa,aAC7BU,UAAS,yBAAkC,aAAdX,GAA4B,YAH3D,iCAQA,wBACEY,KAAK,SACLC,QAAS,kBAAOZ,EAAa,WAC7BU,UAAS,4BAAqC,WAAdX,GAA0B,YAH5D,4BAQA,wBACEY,KAAK,SACLD,UAAS,6BAAwC,IAAjBT,GAA0B,YAC1DW,QAAS,kBAAOV,GAAaD,IAH/B,uBAQmB,IAAjBA,GAAwC,KAAdF,IAC1B,wBACEY,KAAK,SACLD,UAAU,4BACVE,QAAS,WACPZ,EAAa,IACbE,GAAY,IALhB,sBAcJ,6BACGC,EAAaU,KAAI,SAAAC,GAAI,OACpB,oBAAI,UAAQ,OAAZ,SAA+BA,GAAPA,YCpFlCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.bec36ee6.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\ntype SortType = 'length' | 'alphabet';\n\nexport const App: React.FC = () => {\n  const [sortField, setSortField] = useState<SortType | ''>('');\n  const [reverseField, setRevField] = useState<boolean>(false);\n  const visibleGoods: string[] = [...goodsFromServer];\n\n  if (sortField) {\n    visibleGoods.sort((good1, good2) => {\n      switch (sortField) {\n        case 'length':\n          return good1.length - good2.length;\n\n        case 'alphabet':\n          return good1.localeCompare(good2);\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (reverseField) {\n    visibleGoods.reverse();\n  }\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          onClick={() => (setSortField('alphabet'))}\n          className={`button is-info ${sortField !== 'alphabet' && 'is-light'}`}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          onClick={() => (setSortField('length'))}\n          className={`button is-success ${sortField !== 'length' && 'is-light'}`}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={`button is-warning ${reverseField === false && 'is-light'}`}\n          onClick={() => (setRevField(!reverseField))}\n        >\n          Reverse\n        </button>\n\n        {(reverseField !== false || sortField !== '') && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={() => {\n              setSortField('');\n              setRevField(false);\n            }}\n          >\n            Reset\n          </button>\n        )}\n\n      </div>\n\n      <ul>\n        {visibleGoods.map(good => (\n          <li data-cy=\"Good\" key={good}>{good}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}